#!/usr/bin/env ts-node
import { Command } from 'commander';
import dotenv from 'dotenv';
import { Orchestrator } from '../core/orchestrator';
import readline from 'readline';
import { AIService } from '../services/aiService';
import path from 'path';
import fs from 'fs';
import { InferenceClient } from '@huggingface/inference';
dotenv.config();

const program = new Command();

program
  .name('autodevstack')
  .description('AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–∞ –∫–æ–¥–∞')
  .version('0.1.0');

function handleError(e: any) {
  console.error('\x1b[31m[–û—à–∏–±–∫–∞]\x1b[0m', e.message || e);
  process.exit(1);
}

program
  .command('fix <logFile> <targetFile>')
  .description('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –ø–æ –ª–æ–≥–∞–º')
  .action(async (logFile, targetFile) => {
    try {
      await Orchestrator.runFix(logFile, targetFile);
    } catch (e) {
      handleError(e);
    }
  });

program
  .command('generate')
  .description('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
  .action(async () => {
    try {
      await Orchestrator.runGenerate();
    } catch (e) {
      handleError(e);
    }
  });

program
  .command('create')
  .description('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é')
  .option('--db <db>', '–¢–∏–ø –ë–î', 'postgres')
  .option('--frontend <frontend>', '–§—Ä–æ–Ω—Ç–µ–Ω–¥', 'nextjs')
  .option('--backend <backend>', '–ë—ç–∫–µ–Ω–¥', 'express')
  .option('--spec <spec>', '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏')
  .option('--name <name>', '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ –≤ projects/)')
  .action(async (opts) => {
    try {
      const projectName = opts.name || `project-${Date.now()}`;
      await Orchestrator.runCreate({ ...opts, projectName });
      // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const path = require('path');
      const { spawn, execSync } = require('child_process');
      const projectDir = path.join('projects', projectName);
      console.log(`[AutoDevStack] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ ${projectDir}...`);
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –≤–∫–ª—é—á–∞—è concurrently
      try {
        execSync('npm install concurrently', { cwd: projectDir, stdio: 'inherit', shell: true });
        execSync('npm install', { cwd: projectDir, stdio: 'inherit', shell: true });
      } catch (e: any) {
        console.error(`[AutoDevStack][ERR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${e.message}`);
      }
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç start –≤ package.json –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend –∏ frontend —á–µ—Ä–µ–∑ concurrently
      const pkgPath = path.join(projectDir, 'package.json');
      const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'));
      pkg.scripts.start = 'concurrently "npm:api" "npm:dev"';
      fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2), 'utf-8');
      // –ó–∞–ø—É—Å–∫ start-—Å–∫—Ä–∏–ø—Ç–∞ (–æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ñ–æ–Ω–µ)
      console.log(`[AutoDevStack] –ó–∞–ø—É—Å–∫ backend –∏ frontend (npm run start) –≤ ${projectDir}...`);
      const start = spawn('npm', ['run', 'start'], { cwd: projectDir, shell: true, detached: true, stdio: 'ignore' });
      start.unref();
    } catch (e) {
      handleError(e);
    }
  });

program
  .command('chat')
  .description('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞')
  .option('--name <name>', '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫–∞ –≤ projects/)')
  .action(async (opts) => {
    const projectName = opts.name || `project-${Date.now()}`;
    const projectDir = path.join('projects', projectName);
    if (!fs.existsSync('projects')) fs.mkdirSync('projects');
    if (!fs.existsSync(projectDir)) {
      fs.mkdirSync(projectDir);
      fs.mkdirSync(path.join(projectDir, 'src'));
      fs.mkdirSync(path.join(projectDir, 'src', 'adapters'));
      fs.mkdirSync(path.join(projectDir, 'prisma'));
      fs.mkdirSync(path.join(projectDir, 'logs'));
    }
    const historyFile = path.join(projectDir, 'chat_history.txt');
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    const token = process.env.HF_TOKEN;
    if (!token) {
      console.error('HF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env');
      process.exit(1);
    }
    const model = 'deepseek-ai/DeepSeek-V3-0324';
    const projectContext = '–ü—Ä–æ–µ–∫—Ç: AutoDevStack. –≠—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä fullstack-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (PostgreSQL + Express + React + Prisma + Next.js + Cypress + CLI) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI, –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏ –∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–º.';
    const assistantRole = '–Ø ‚Äî —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É AutoDevStack. –Ø –∑–Ω–∞—é –≤—Å—ë –æ –µ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å–æ–º –∫–æ–¥–∞. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è ‚Äî —è –≤—Å—ë —Å–¥–µ–ª–∞—é!';
    const client = new InferenceClient(token);
    let messages = [
      { role: 'system', content: projectContext },
      { role: 'assistant', content: assistantRole }
    ];
    console.log(`üí¨ [${projectName}] –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (exit –¥–ª—è –≤—ã—Ö–æ–¥–∞):`);
    const ask = () => {
      rl.question('> ', async (q) => {
        if (q.trim().toLowerCase() === 'exit') {
          rl.close();
          return;
        }
        messages.push({ role: 'user', content: q });
        fs.appendFileSync(historyFile, `USER: ${q}\n`);
        try {
          console.log('[DEBUG][DeepSeek] chatCompletion:', JSON.stringify({ model, messages }, null, 2));
          const response = await client.chatCompletion({ model, messages });
          const msg = response.choices?.[0]?.message;
          messages.push({ role: msg?.role || 'assistant', content: msg?.content || '' });
          fs.appendFileSync(historyFile, `AI: ${JSON.stringify(msg, null, 2)}\n`);
          console.log(`[AutoDevStack][${msg.role}] (${model}):\n${msg.content}`);
        } catch (e: any) {
          console.error('[DeepSeek][–û—à–∏–±–∫–∞]:', e.message);
        }
        ask();
      });
    };
    ask();
  });

program
  .command('update-models')
  .description('–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π Hugging Face –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (best_models.json)')
  .action(async () => {
    const { selectBestModels } = await import('./hf_select_best_models');
    await selectBestModels();
  });

program.parse(process.argv); 